Bootstrap: docker
From: ubuntu:24.04

%post
    apt-get update && apt-get install -y \
        build-essential \
        cmake \
        autoconf \
        automake \
        libtool \
        pkg-config \
        curl \
        wget \
        git \
        tar \
        gzip \
        unzip \
        make \
        g++-13 \
        gcc-13 \
        python3 \
        python3-pip \
        && rm -rf /var/lib/apt/lists/*

    # Set GCC 13 as default
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100

    # Build and install protobuf from source
    cd /tmp
    git clone https://github.com/protocolbuffers/protobuf.git
    cd protobuf
    git checkout v30.2  # Use the same version as your protoc binary
    git submodule update --init --recursive
    
    # Build and install
    mkdir build && cd build
    cmake -DCMAKE_BUILD_TYPE=Release \
          -Dprotobuf_BUILD_TESTS=OFF \
          -Dprotobuf_BUILD_SHARED_LIBS=ON \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          ..
    make -j$(nproc)
    make install
    
    # Clean up
    cd /
    rm -rf /tmp/protobuf

    # 
    echo "Installing Open MPI"
    export OMPI_DIR=/opt/ompi
    export OMPI_VERSION=4.0.1
    export OMPI_URL="https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-$OMPI_VERSION.tar.bz2"
    mkdir -p /tmp/ompi
    mkdir -p /opt
    # Download
    cd /tmp/ompi && wget -O openmpi-$OMPI_VERSION.tar.bz2 $OMPI_URL && tar -xjf openmpi-$OMPI_VERSION.tar.bz2
    # Compile and install
    cd /tmp/ompi/openmpi-$OMPI_VERSION && ./configure --prefix=$OMPI_DIR && make install
    # Set env variables so we can compile our application
    export PATH=$OMPI_DIR/bin:$PATH
    export LD_LIBRARY_PATH=$OMPI_DIR/lib:$LD_LIBRARY_PATH
    export MANPATH=$OMPI_DIR/share/man:$MANPATH


    # Verify installations
    echo "=== Compiler ==="
    g++ --version
    echo "=== Protoc ==="
    protoc --version
    echo "=== Checking protobuf installation ==="
    pkg-config --exists protobuf && echo "protobuf found by pkg-config"

%environment
    export PATH=/usr/local/bin:$PATH
    export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
    export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
    export CMAKE_PREFIX_PATH=/usr/local:$CMAKE_PREFIX_PATH

    export OMPI_DIR=/opt/ompi
    export SINGULARITY_OMPI_DIR=$OMPI_DIR
    export SINGULARITYENV_APPEND_PATH=$OMPI_DIR/bin
    export SINGULAIRTYENV_APPEND_LD_LIBRARY_PATH=$OMPI_DIR/lib
    
    # Set C++ standard to C++20
    export CXXFLAGS="-std=c++20"

%labels
    Author YourName
    Version 1.0
    Description "Container with C++20 compiler and protobuf built from source"

%help
    This container provides:
    - C++20 compatible compiler (GCC from Ubuntu 22.04)
    - Protocol Buffers built from source with CMake support
    
    Usage examples:
    singularity exec container.sif g++ -std=c++20 your_code.cpp -lprotobuf
    singularity exec container.sif protoc --version